// <auto-generated />
#pragma warning disable CS0105
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using System;
using WebApplication.Domain.Entity.Employee;
using WebApplication.Domain.Tables;

namespace WebApplication.Domain
{
   public sealed class ImmutableBuilder : ImmutableBuilderBase
   {
        MemoryDatabase memory;

        public ImmutableBuilder(MemoryDatabase memory)
        {
            this.memory = memory;
        }

        public MemoryDatabase Build()
        {
            return memory;
        }

        public void ReplaceAll(System.Collections.Generic.IList<EmployeesEntity> data)
        {
            var newData = CloneAndSortBy(data, x => x.EmpNo, System.Collections.Generic.Comparer<int>.Default);
            var table = new EmployeesEntityTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.TitlesEntityTable
            
            );
        }

        public void RemoveEmployeesEntity(int[] keys)
        {
            var data = RemoveCore(memory.EmployeesEntityTable.GetRawDataUnsafe(), keys, x => x.EmpNo, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.EmpNo, System.Collections.Generic.Comparer<int>.Default);
            var table = new EmployeesEntityTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.TitlesEntityTable
            
            );
        }

        public void Diff(EmployeesEntity[] addOrReplaceData)
        {
            var data = DiffCore(memory.EmployeesEntityTable.GetRawDataUnsafe(), addOrReplaceData, x => x.EmpNo, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.EmpNo, System.Collections.Generic.Comparer<int>.Default);
            var table = new EmployeesEntityTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.TitlesEntityTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<TitlesEntity> data)
        {
            var newData = CloneAndSortBy(data, x => (x.EmpNo, x.FromDate), System.Collections.Generic.Comparer<(int EmpNo, DateTime FromDate)>.Default);
            var table = new TitlesEntityTable(newData);
            memory = new MemoryDatabase(
                memory.EmployeesEntityTable,
                table
            
            );
        }

        public void RemoveTitlesEntity((int EmpNo, DateTime FromDate)[] keys)
        {
            var data = RemoveCore(memory.TitlesEntityTable.GetRawDataUnsafe(), keys, x => (x.EmpNo, x.FromDate), System.Collections.Generic.Comparer<(int EmpNo, DateTime FromDate)>.Default);
            var newData = CloneAndSortBy(data, x => (x.EmpNo, x.FromDate), System.Collections.Generic.Comparer<(int EmpNo, DateTime FromDate)>.Default);
            var table = new TitlesEntityTable(newData);
            memory = new MemoryDatabase(
                memory.EmployeesEntityTable,
                table
            
            );
        }

        public void Diff(TitlesEntity[] addOrReplaceData)
        {
            var data = DiffCore(memory.TitlesEntityTable.GetRawDataUnsafe(), addOrReplaceData, x => (x.EmpNo, x.FromDate), System.Collections.Generic.Comparer<(int EmpNo, DateTime FromDate)>.Default);
            var newData = CloneAndSortBy(data, x => (x.EmpNo, x.FromDate), System.Collections.Generic.Comparer<(int EmpNo, DateTime FromDate)>.Default);
            var table = new TitlesEntityTable(newData);
            memory = new MemoryDatabase(
                memory.EmployeesEntityTable,
                table
            
            );
        }

    }
}