// <auto-generated />
using System;
using Infrastructure.Database.Context.Employee;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatabaseMigration.Migrations
{
    [DbContext(typeof(EmployeesContext))]
    [Migration("20230306160337_CreateInitTables")]
    partial class CreateInitTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entity.Employee.DepartmentEntity", b =>
                {
                    b.Property<string>("DepotNo")
                        .HasColumnType("char(4)")
                        .HasColumnName("dept_no");

                    b.Property<string>("DeptEmpEntityDeptNo")
                        .HasColumnType("varchar(4)");

                    b.Property<int?>("DeptEmpEntityEmpNo")
                        .HasColumnType("int");

                    b.Property<string>("DeptName")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasColumnName("dept_name");

                    b.HasKey("DepotNo");

                    b.HasIndex("DeptEmpEntityEmpNo", "DeptEmpEntityDeptNo");

                    b.HasIndex(new[] { "DeptName" }, "DeptName")
                        .IsUnique();

                    b.ToTable("departments");
                });

            modelBuilder.Entity("Domain.Entity.Employee.DeptEmpEntity", b =>
                {
                    b.Property<int>("EmpNo")
                        .HasColumnType("int")
                        .HasColumnName("emp_no");

                    b.Property<string>("DeptNo")
                        .HasColumnType("varchar(4)")
                        .HasColumnName("dept_no");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("date")
                        .HasColumnName("from_date");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("date")
                        .HasColumnName("to_date");

                    b.HasKey("EmpNo", "DeptNo");

                    b.HasIndex(new[] { "DeptNo" }, "DeptNo");

                    b.ToTable("dept_emp");
                });

            modelBuilder.Entity("Domain.Entity.Employee.EmployeesEntity", b =>
                {
                    b.Property<int>("EmpNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("emp_no");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<string>("DeptEmpEntityDeptNo")
                        .HasColumnType("varchar(4)");

                    b.Property<int?>("DeptEmpEntityEmpNo")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(14)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("enum('M', 'F')")
                        .HasColumnName("gender");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("date")
                        .HasColumnName("hire_date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(16)")
                        .HasColumnName("last_name");

                    b.HasKey("EmpNo");

                    b.HasIndex("DeptEmpEntityEmpNo", "DeptEmpEntityDeptNo");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("Domain.Entity.Employee.SalariesEntity", b =>
                {
                    b.Property<int>("EmpNo")
                        .HasColumnType("int")
                        .HasColumnName("emp_no");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("date")
                        .HasColumnName("from_date");

                    b.Property<int>("Salary")
                        .HasColumnType("int")
                        .HasColumnName("salary");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("date")
                        .HasColumnName("to_date");

                    b.HasKey("EmpNo", "FromDate");

                    b.ToTable("salaries");
                });

            modelBuilder.Entity("Domain.Entity.Employee.TitlesEntity", b =>
                {
                    b.Property<int>("EmpNo")
                        .HasColumnType("int")
                        .HasColumnName("emp_no");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("title");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("date")
                        .HasColumnName("from_date");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("date")
                        .HasColumnName("to_date");

                    b.HasKey("EmpNo", "FromDate");

                    b.ToTable("titles");
                });

            modelBuilder.Entity("Domain.Entity.Employee.DepartmentEntity", b =>
                {
                    b.HasOne("Domain.Entity.Employee.DeptEmpEntity", null)
                        .WithMany()
                        .HasForeignKey("DeptEmpEntityEmpNo", "DeptEmpEntityDeptNo");
                });

            modelBuilder.Entity("Domain.Entity.Employee.EmployeesEntity", b =>
                {
                    b.HasOne("Domain.Entity.Employee.DeptEmpEntity", null)
                        .WithMany()
                        .HasForeignKey("DeptEmpEntityEmpNo", "DeptEmpEntityDeptNo");
                });

            modelBuilder.Entity("Domain.Entity.Employee.SalariesEntity", b =>
                {
                    b.HasOne("Domain.Entity.Employee.EmployeesEntity", null)
                        .WithMany()
                        .HasForeignKey("EmpNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entity.Employee.TitlesEntity", b =>
                {
                    b.HasOne("Domain.Entity.Employee.EmployeesEntity", null)
                        .WithMany()
                        .HasForeignKey("EmpNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
