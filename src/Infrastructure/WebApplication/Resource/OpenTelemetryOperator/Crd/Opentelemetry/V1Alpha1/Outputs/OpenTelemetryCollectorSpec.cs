// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Opentelemetry.V1Alpha1
{

    /// <summary>
    /// OpenTelemetryCollectorSpec defines the desired state of OpenTelemetryCollector.
    /// </summary>
    [OutputType]
    public sealed class OpenTelemetryCollectorSpec
    {
        /// <summary>
        /// Args is the set of arguments to pass to the OpenTelemetry Collector binary
        /// </summary>
        public readonly ImmutableDictionary<string, string> Args;
        /// <summary>
        /// Autoscaler specifies the pod autoscaling configuration to use for the OpenTelemetryCollector workload.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Opentelemetry.V1Alpha1.OpenTelemetryCollectorSpecAutoscaler Autoscaler;
        /// <summary>
        /// Config is the raw JSON to be used as the collector's configuration. Refer to the OpenTelemetry Collector documentation for details.
        /// </summary>
        public readonly string Config;
        /// <summary>
        /// ENV vars to set on the OpenTelemetry Collector's Pods. These can then in certain cases be consumed in the config file for the Collector.
        /// </summary>
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Opentelemetry.V1Alpha1.OpenTelemetryCollectorSpecEnv> Env;
        /// <summary>
        /// List of sources to populate environment variables on the OpenTelemetry Collector's Pods. These can then in certain cases be consumed in the config file for the Collector.
        /// </summary>
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Opentelemetry.V1Alpha1.OpenTelemetryCollectorSpecEnvfrom> EnvFrom;
        /// <summary>
        /// HostNetwork indicates if the pod should run in the host networking namespace.
        /// </summary>
        public readonly bool HostNetwork;
        /// <summary>
        /// Image indicates the container image to use for the OpenTelemetry Collector.
        /// </summary>
        public readonly string Image;
        /// <summary>
        /// ImagePullPolicy indicates the pull policy to be used for retrieving the container image (Always, Never, IfNotPresent)
        /// </summary>
        public readonly string ImagePullPolicy;
        /// <summary>
        /// MaxReplicas sets an upper bound to the autoscaling feature. If MaxReplicas is set autoscaling is enabled.
        /// </summary>
        public readonly int MaxReplicas;
        /// <summary>
        /// MinReplicas sets a lower bound to the autoscaling feature.  Set this if your are using autoscaling. It must be at least 1
        /// </summary>
        public readonly int MinReplicas;
        /// <summary>
        /// Mode represents how the collector should be deployed (deployment, daemonset, statefulset or sidecar)
        /// </summary>
        public readonly string Mode;
        /// <summary>
        /// NodeSelector to schedule OpenTelemetry Collector pods. This is only relevant to daemonset, statefulset, and deployment mode
        /// </summary>
        public readonly ImmutableDictionary<string, string> NodeSelector;
        /// <summary>
        /// PodAnnotations is the set of annotations that will be attached to Collector and Target Allocator pods.
        /// </summary>
        public readonly ImmutableDictionary<string, string> PodAnnotations;
        /// <summary>
        /// PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Opentelemetry.V1Alpha1.OpenTelemetryCollectorSpecPodsecuritycontext PodSecurityContext;
        /// <summary>
        /// Ports allows a set of ports to be exposed by the underlying v1.Service. By default, the operator will attempt to infer the required ports by parsing the .Spec.Config property but this property can be used to open aditional ports that can't be inferred by the operator, like for custom receivers.
        /// </summary>
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Opentelemetry.V1Alpha1.OpenTelemetryCollectorSpecPorts> Ports;
        /// <summary>
        /// Replicas is the number of pod instances for the underlying OpenTelemetry Collector. Set this if your are not using autoscaling
        /// </summary>
        public readonly int Replicas;
        /// <summary>
        /// Resources to set on the OpenTelemetry Collector pods.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Opentelemetry.V1Alpha1.OpenTelemetryCollectorSpecResources Resources;
        /// <summary>
        /// SecurityContext will be set as the container security context.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Opentelemetry.V1Alpha1.OpenTelemetryCollectorSpecSecuritycontext SecurityContext;
        /// <summary>
        /// ServiceAccount indicates the name of an existing service account to use with this instance.
        /// </summary>
        public readonly string ServiceAccount;
        /// <summary>
        /// TargetAllocator indicates a value which determines whether to spawn a target allocation resource or not.
        /// </summary>
        public readonly Pulumi.Kubernetes.Types.Outputs.Opentelemetry.V1Alpha1.OpenTelemetryCollectorSpecTargetallocator TargetAllocator;
        /// <summary>
        /// Toleration to schedule OpenTelemetry Collector pods. This is only relevant to daemonset, statefulset, and deployment mode
        /// </summary>
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Opentelemetry.V1Alpha1.OpenTelemetryCollectorSpecTolerations> Tolerations;
        /// <summary>
        /// UpgradeStrategy represents how the operator will handle upgrades to the CR when a newer version of the operator is deployed
        /// </summary>
        public readonly string UpgradeStrategy;
        /// <summary>
        /// VolumeClaimTemplates will provide stable storage using PersistentVolumes. Only available when the mode=statefulset.
        /// </summary>
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Opentelemetry.V1Alpha1.OpenTelemetryCollectorSpecVolumeclaimtemplates> VolumeClaimTemplates;
        /// <summary>
        /// VolumeMounts represents the mount points to use in the underlying collector deployment(s)
        /// </summary>
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Opentelemetry.V1Alpha1.OpenTelemetryCollectorSpecVolumemounts> VolumeMounts;
        /// <summary>
        /// Volumes represents which volumes to use in the underlying collector deployment(s).
        /// </summary>
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Opentelemetry.V1Alpha1.OpenTelemetryCollectorSpecVolumes> Volumes;

        [OutputConstructor]
        private OpenTelemetryCollectorSpec(
            ImmutableDictionary<string, string> args,

            Pulumi.Kubernetes.Types.Outputs.Opentelemetry.V1Alpha1.OpenTelemetryCollectorSpecAutoscaler autoscaler,

            string config,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Opentelemetry.V1Alpha1.OpenTelemetryCollectorSpecEnv> env,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Opentelemetry.V1Alpha1.OpenTelemetryCollectorSpecEnvfrom> envFrom,

            bool hostNetwork,

            string image,

            string imagePullPolicy,

            int maxReplicas,

            int minReplicas,

            string mode,

            ImmutableDictionary<string, string> nodeSelector,

            ImmutableDictionary<string, string> podAnnotations,

            Pulumi.Kubernetes.Types.Outputs.Opentelemetry.V1Alpha1.OpenTelemetryCollectorSpecPodsecuritycontext podSecurityContext,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Opentelemetry.V1Alpha1.OpenTelemetryCollectorSpecPorts> ports,

            int replicas,

            Pulumi.Kubernetes.Types.Outputs.Opentelemetry.V1Alpha1.OpenTelemetryCollectorSpecResources resources,

            Pulumi.Kubernetes.Types.Outputs.Opentelemetry.V1Alpha1.OpenTelemetryCollectorSpecSecuritycontext securityContext,

            string serviceAccount,

            Pulumi.Kubernetes.Types.Outputs.Opentelemetry.V1Alpha1.OpenTelemetryCollectorSpecTargetallocator targetAllocator,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Opentelemetry.V1Alpha1.OpenTelemetryCollectorSpecTolerations> tolerations,

            string upgradeStrategy,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Opentelemetry.V1Alpha1.OpenTelemetryCollectorSpecVolumeclaimtemplates> volumeClaimTemplates,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Opentelemetry.V1Alpha1.OpenTelemetryCollectorSpecVolumemounts> volumeMounts,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Opentelemetry.V1Alpha1.OpenTelemetryCollectorSpecVolumes> volumes)
        {
            Args = args;
            Autoscaler = autoscaler;
            Config = config;
            Env = env;
            EnvFrom = envFrom;
            HostNetwork = hostNetwork;
            Image = image;
            ImagePullPolicy = imagePullPolicy;
            MaxReplicas = maxReplicas;
            MinReplicas = minReplicas;
            Mode = mode;
            NodeSelector = nodeSelector;
            PodAnnotations = podAnnotations;
            PodSecurityContext = podSecurityContext;
            Ports = ports;
            Replicas = replicas;
            Resources = resources;
            SecurityContext = securityContext;
            ServiceAccount = serviceAccount;
            TargetAllocator = targetAllocator;
            Tolerations = tolerations;
            UpgradeStrategy = upgradeStrategy;
            VolumeClaimTemplates = volumeClaimTemplates;
            VolumeMounts = volumeMounts;
            Volumes = volumes;
        }
    }
}
