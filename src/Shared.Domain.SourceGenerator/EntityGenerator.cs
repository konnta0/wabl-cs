using Microsoft.CodeAnalysis;

namespace Shared.Domain.SourceGenerator
{
    [Generator(LanguageNames.CSharp)]
    public class EntityGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {

            context.RegisterPostInitializationOutput(static context =>
            {
                // nop
            });

            var source = context.SyntaxProvider.ForAttributeWithMetadataName(
                    "System.ComponentModel.DataAnnotations.Schema.TableAttribute",
                    static (_, _) => true,
                    static (context, _) => context);
            context.RegisterSourceOutput(source, Emit);
        }

        private static void Emit(SourceProductionContext context, GeneratorAttributeSyntaxContext source)
        {

            var typeSymbol = (INamedTypeSymbol)source.TargetSymbol;

            var ns = typeSymbol.ContainingNamespace.IsGlobalNamespace
            ? ""
            : $"namespace {typeSymbol.ContainingNamespace};";

            var fullType = typeSymbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)
                .Replace("global::", "")
                .Replace("<", "_")
                .Replace(">", "_");

            var code = $$"""
// <auto-generated/>
// This file was generated by {{nameof(EntityGenerator)}}.

using Shared.Domain.Entity;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

{{ns}}

partial class {{typeSymbol.Name}} : IEntity
{
    public static partial void OnModelCreating(EntityTypeBuilder<{{typeSymbol.Name}}> entityTypeBuilder);
}
""";

            context.AddSource($"{fullType}.g.cs", code);
        }
    }
}