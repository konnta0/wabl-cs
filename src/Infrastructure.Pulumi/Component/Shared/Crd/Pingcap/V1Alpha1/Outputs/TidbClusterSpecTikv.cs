// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kubernetes.Types.Outputs.Pingcap.V1Alpha1
{

    [OutputType]
    public sealed class TidbClusterSpecTikv
    {
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Pingcap.V1Alpha1.TidbClusterSpecTikvAdditionalcontainers> AdditionalContainers;
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Pingcap.V1Alpha1.TidbClusterSpecTikvAdditionalvolumemounts> AdditionalVolumeMounts;
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Pingcap.V1Alpha1.TidbClusterSpecTikvAdditionalvolumes> AdditionalVolumes;
        public readonly Pulumi.Kubernetes.Types.Outputs.Pingcap.V1Alpha1.TidbClusterSpecTikvAffinity Affinity;
        public readonly ImmutableDictionary<string, string> Annotations;
        public readonly string BaseImage;
        public readonly ImmutableDictionary<string, object> Config;
        public readonly string ConfigUpdateStrategy;
        public readonly string DataSubDir;
        public readonly Pulumi.Kubernetes.Types.Outputs.Pingcap.V1Alpha1.TidbClusterSpecTikvDnsconfig DnsConfig;
        public readonly string DnsPolicy;
        public readonly bool EnableNamedStatusPort;
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Pingcap.V1Alpha1.TidbClusterSpecTikvEnv> Env;
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Pingcap.V1Alpha1.TidbClusterSpecTikvEnvfrom> EnvFrom;
        public readonly string EvictLeaderTimeout;
        public readonly Pulumi.Kubernetes.Types.Outputs.Pingcap.V1Alpha1.TidbClusterSpecTikvFailover Failover;
        public readonly bool HostNetwork;
        public readonly string Image;
        public readonly string ImagePullPolicy;
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Pingcap.V1Alpha1.TidbClusterSpecTikvImagepullsecrets> ImagePullSecrets;
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Pingcap.V1Alpha1.TidbClusterSpecTikvInitcontainers> InitContainers;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly ImmutableDictionary<string, Union<int, string>> Limits;
        public readonly Pulumi.Kubernetes.Types.Outputs.Pingcap.V1Alpha1.TidbClusterSpecTikvLogtailer LogTailer;
        public readonly int MaxFailoverCount;
        public readonly bool MountClusterClientSecret;
        public readonly ImmutableDictionary<string, string> NodeSelector;
        public readonly string PodManagementPolicy;
        public readonly Pulumi.Kubernetes.Types.Outputs.Pingcap.V1Alpha1.TidbClusterSpecTikvPodsecuritycontext PodSecurityContext;
        public readonly string PriorityClassName;
        public readonly bool Privileged;
        public readonly string RaftLogVolumeName;
        public readonly bool RecoverFailover;
        public readonly int Replicas;
        public readonly ImmutableDictionary<string, Union<int, string>> Requests;
        public readonly string RocksDBLogVolumeName;
        public readonly string SchedulerName;
        public readonly bool SeparateRaftLog;
        public readonly bool SeparateRocksDBLog;
        public readonly string ServiceAccount;
        public readonly string StatefulSetUpdateStrategy;
        public readonly string StorageClassName;
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Pingcap.V1Alpha1.TidbClusterSpecTikvStoragevolumes> StorageVolumes;
        public readonly ImmutableArray<string> StoreLabels;
        public readonly Pulumi.Kubernetes.Types.Outputs.Pingcap.V1Alpha1.TidbClusterSpecTikvSuspendaction SuspendAction;
        public readonly int TerminationGracePeriodSeconds;
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Pingcap.V1Alpha1.TidbClusterSpecTikvTolerations> Tolerations;
        public readonly ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Pingcap.V1Alpha1.TidbClusterSpecTikvTopologyspreadconstraints> TopologySpreadConstraints;
        public readonly string Version;

        [OutputConstructor]
        private TidbClusterSpecTikv(
            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Pingcap.V1Alpha1.TidbClusterSpecTikvAdditionalcontainers> additionalContainers,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Pingcap.V1Alpha1.TidbClusterSpecTikvAdditionalvolumemounts> additionalVolumeMounts,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Pingcap.V1Alpha1.TidbClusterSpecTikvAdditionalvolumes> additionalVolumes,

            Pulumi.Kubernetes.Types.Outputs.Pingcap.V1Alpha1.TidbClusterSpecTikvAffinity affinity,

            ImmutableDictionary<string, string> annotations,

            string baseImage,

            ImmutableDictionary<string, object> config,

            string configUpdateStrategy,

            string dataSubDir,

            Pulumi.Kubernetes.Types.Outputs.Pingcap.V1Alpha1.TidbClusterSpecTikvDnsconfig dnsConfig,

            string dnsPolicy,

            bool enableNamedStatusPort,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Pingcap.V1Alpha1.TidbClusterSpecTikvEnv> env,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Pingcap.V1Alpha1.TidbClusterSpecTikvEnvfrom> envFrom,

            string evictLeaderTimeout,

            Pulumi.Kubernetes.Types.Outputs.Pingcap.V1Alpha1.TidbClusterSpecTikvFailover failover,

            bool hostNetwork,

            string image,

            string imagePullPolicy,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Pingcap.V1Alpha1.TidbClusterSpecTikvImagepullsecrets> imagePullSecrets,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Pingcap.V1Alpha1.TidbClusterSpecTikvInitcontainers> initContainers,

            ImmutableDictionary<string, string> labels,

            ImmutableDictionary<string, Union<int, string>> limits,

            Pulumi.Kubernetes.Types.Outputs.Pingcap.V1Alpha1.TidbClusterSpecTikvLogtailer logTailer,

            int maxFailoverCount,

            bool mountClusterClientSecret,

            ImmutableDictionary<string, string> nodeSelector,

            string podManagementPolicy,

            Pulumi.Kubernetes.Types.Outputs.Pingcap.V1Alpha1.TidbClusterSpecTikvPodsecuritycontext podSecurityContext,

            string priorityClassName,

            bool privileged,

            string raftLogVolumeName,

            bool recoverFailover,

            int replicas,

            ImmutableDictionary<string, Union<int, string>> requests,

            string rocksDBLogVolumeName,

            string schedulerName,

            bool separateRaftLog,

            bool separateRocksDBLog,

            string serviceAccount,

            string statefulSetUpdateStrategy,

            string storageClassName,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Pingcap.V1Alpha1.TidbClusterSpecTikvStoragevolumes> storageVolumes,

            ImmutableArray<string> storeLabels,

            Pulumi.Kubernetes.Types.Outputs.Pingcap.V1Alpha1.TidbClusterSpecTikvSuspendaction suspendAction,

            int terminationGracePeriodSeconds,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Pingcap.V1Alpha1.TidbClusterSpecTikvTolerations> tolerations,

            ImmutableArray<Pulumi.Kubernetes.Types.Outputs.Pingcap.V1Alpha1.TidbClusterSpecTikvTopologyspreadconstraints> topologySpreadConstraints,

            string version)
        {
            AdditionalContainers = additionalContainers;
            AdditionalVolumeMounts = additionalVolumeMounts;
            AdditionalVolumes = additionalVolumes;
            Affinity = affinity;
            Annotations = annotations;
            BaseImage = baseImage;
            Config = config;
            ConfigUpdateStrategy = configUpdateStrategy;
            DataSubDir = dataSubDir;
            DnsConfig = dnsConfig;
            DnsPolicy = dnsPolicy;
            EnableNamedStatusPort = enableNamedStatusPort;
            Env = env;
            EnvFrom = envFrom;
            EvictLeaderTimeout = evictLeaderTimeout;
            Failover = failover;
            HostNetwork = hostNetwork;
            Image = image;
            ImagePullPolicy = imagePullPolicy;
            ImagePullSecrets = imagePullSecrets;
            InitContainers = initContainers;
            Labels = labels;
            Limits = limits;
            LogTailer = logTailer;
            MaxFailoverCount = maxFailoverCount;
            MountClusterClientSecret = mountClusterClientSecret;
            NodeSelector = nodeSelector;
            PodManagementPolicy = podManagementPolicy;
            PodSecurityContext = podSecurityContext;
            PriorityClassName = priorityClassName;
            Privileged = privileged;
            RaftLogVolumeName = raftLogVolumeName;
            RecoverFailover = recoverFailover;
            Replicas = replicas;
            Requests = requests;
            RocksDBLogVolumeName = rocksDBLogVolumeName;
            SchedulerName = schedulerName;
            SeparateRaftLog = separateRaftLog;
            SeparateRocksDBLog = separateRocksDBLog;
            ServiceAccount = serviceAccount;
            StatefulSetUpdateStrategy = statefulSetUpdateStrategy;
            StorageClassName = storageClassName;
            StorageVolumes = storageVolumes;
            StoreLabels = storeLabels;
            SuspendAction = suspendAction;
            TerminationGracePeriodSeconds = terminationGracePeriodSeconds;
            Tolerations = tolerations;
            TopologySpreadConstraints = topologySpreadConstraints;
            Version = version;
        }
    }
}
